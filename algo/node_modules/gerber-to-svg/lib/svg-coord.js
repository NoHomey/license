(function() {
  var SVG_COORD_E, getSvgCoord,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  SVG_COORD_E = 3;

  getSvgCoord = function(numberString, format) {
    var after, before, c, i, j, k, len, len1, ref, ref1, ref2, ref3, sign, subNumbers;
    if (numberString != null) {
      numberString = "" + numberString;
    } else {
      return NaN;
    }
    before = '';
    after = '';
    sign = '+';
    if (numberString[0] === '-' || numberString[0] === '+') {
      sign = numberString[0];
      numberString = numberString.slice(1);
    }
    if ((indexOf.call(numberString, '.') >= 0) || (format.zero == null)) {
      subNumbers = numberString.split('.');
      if (subNumbers.length > 2) {
        return NaN;
      }
      ref1 = [subNumbers[0], (ref = subNumbers[1]) != null ? ref : ''], before = ref1[0], after = ref1[1];
    } else {
      if (typeof (format != null ? (ref2 = format.places) != null ? ref2[0] : void 0 : void 0) !== 'number' || typeof (format != null ? (ref3 = format.places) != null ? ref3[1] : void 0 : void 0) !== 'number') {
        return NaN;
      }
      if (format.zero === 'T') {
        for (i = j = 0, len = numberString.length; j < len; i = ++j) {
          c = numberString[i];
          if (i < format.places[0]) {
            before += c;
          } else {
            after += c;
          }
        }
        while (before.length < format.places[0]) {
          before += '0';
        }
      } else if (format.zero === 'L') {
        for (i = k = 0, len1 = numberString.length; k < len1; i = ++k) {
          c = numberString[i];
          if (numberString.length - i <= format.places[1]) {
            after += c;
          } else {
            before += c;
          }
        }
        while (after.length < format.places[1]) {
          after = '0' + after;
        }
      }
    }
    while (after.length < SVG_COORD_E) {
      after += '0';
    }
    before = before + after.slice(0, SVG_COORD_E);
    after = after.length > SVG_COORD_E ? "." + after.slice(SVG_COORD_E) : '';
    return Number(sign + before + after);
  };

  module.exports = {
    get: getSvgCoord,
    factor: Math.pow(10, SVG_COORD_E)
  };

}).call(this);
