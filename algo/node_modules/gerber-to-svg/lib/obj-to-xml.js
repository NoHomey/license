(function() {
  var CKEY, DTAB, objToXml, repeat;

  repeat = function(pattern, count) {
    var result;
    result = '';
    if (count === 0) {
      return '';
    }
    while (count > 1) {
      if (count & 1) {
        result += pattern;
      }
      count >>= 1;
      pattern += pattern;
    }
    return result + pattern;
  };

  CKEY = '_';

  DTAB = '  ';

  objToXml = function(obj, op) {
    var children, dec, decimals, elem, i, ind, j, key, len, nl, o, pre, ref, ref1, ref2, tb, v, val, xml;
    if (op == null) {
      op = {};
    }
    pre = op.pretty;
    ind = (ref = op.indent) != null ? ref : 0;
    dec = (ref1 = op.maxDec) != null ? ref1 : false;
    decimals = function(n) {
      if (typeof n === 'number') {
        return Number(n.toFixed(dec));
      } else {
        return n;
      }
    };
    nl = pre ? '\n' : '';
    tb = nl ? (typeof pre === 'string' ? pre : DTAB) : '';
    tb = repeat(tb, ind);
    xml = '';
    if (typeof obj === 'function') {
      obj = obj();
    }
    if (Array.isArray(obj)) {
      for (i = j = 0, len = obj.length; j < len; i = ++j) {
        o = obj[i];
        xml += (i !== 0 ? nl : '') + (objToXml(o, op));
      }
    } else if (typeof obj === 'object') {
      children = false;
      elem = Object.keys(obj)[0];
      if (elem != null) {
        xml = tb + "<" + elem;
        if (typeof obj[elem] === 'function') {
          obj[elem] = obj[elem]();
        }
        ref2 = obj[elem];
        for (key in ref2) {
          val = ref2[key];
          if (typeof val === 'function') {
            val = val();
          }
          if (key === CKEY) {
            children = val;
          } else {
            if (Array.isArray(val)) {
              if (dec) {
                val = (function() {
                  var k, len1, results;
                  results = [];
                  for (k = 0, len1 = val.length; k < len1; k++) {
                    v = val[k];
                    results.push(decimals(v));
                  }
                  return results;
                })();
              }
              val = val.join(' ');
            }
            if (dec) {
              val = decimals(val);
            }
            xml += " " + key + "=\"" + val + "\"";
          }
        }
        if (children) {
          xml += '>' + nl + objToXml(children, {
            pretty: pre,
            indent: ind + 1
          });
        }
        if (obj[elem]._ != null) {
          xml += "" + nl + tb + "</" + elem + ">";
        } else {
          xml += '/>';
        }
      }
    } else {
      xml += obj + " ";
    }
    return xml;
  };

  module.exports = objToXml;

}).call(this);
